{"ast":null,"code":"export var toCharCode = function (character) {\n  return character.charCodeAt(0);\n};\nexport var toCodePoint = function (character) {\n  return character.codePointAt(0);\n};\nexport var toHexStringOfMinLength = function (num, minLength) {\n  return padStart(num.toString(16), minLength, '0').toUpperCase();\n};\nexport var toHexString = function (num) {\n  return toHexStringOfMinLength(num, 2);\n};\nexport var charFromCode = function (code) {\n  return String.fromCharCode(code);\n};\nexport var charFromHexCode = function (hex) {\n  return charFromCode(parseInt(hex, 16));\n};\nexport var padStart = function (value, length, padChar) {\n  var padding = '';\n\n  for (var idx = 0, len = length - value.length; idx < len; idx++) {\n    padding += padChar;\n  }\n\n  return padding + value;\n};\nexport var copyStringIntoBuffer = function (str, buffer, offset) {\n  var length = str.length;\n\n  for (var idx = 0; idx < length; idx++) {\n    buffer[offset++] = str.charCodeAt(idx);\n  }\n\n  return length;\n};\nexport var addRandomSuffix = function (prefix, suffixLength) {\n  if (suffixLength === void 0) {\n    suffixLength = 4;\n  }\n\n  return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n};\nexport var escapeRegExp = function (str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nexport var cleanText = function (text) {\n  return text.replace(/\\t/g, '    ').replace(/[\\b\\v]/g, '');\n};\n\nvar buildWordBreakRegex = function (wordBreaks) {\n  var escapedRules = ['$'];\n\n  for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n    var wordBreak = wordBreaks[idx];\n\n    if (wordBreak.includes('\\n') || wordBreak.includes('\\r')) {\n      throw new TypeError('`wordBreak` must not include \\\\n or \\\\r');\n    }\n\n    escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n  }\n\n  var breakRules = escapedRules.join('|');\n  return new RegExp(\"(\\\\n|\\\\r)|((.*?)(\" + breakRules + \"))\", 'gm');\n};\n\nexport var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n  var regex = buildWordBreakRegex(wordBreaks);\n  var words = cleanText(text).match(regex);\n  var currLine = '';\n  var currWidth = 0;\n  var lines = [];\n\n  var pushCurrLine = function () {\n    if (currLine !== '') lines.push(currLine);\n    currLine = '';\n    currWidth = 0;\n  };\n\n  for (var idx = 0, len = words.length; idx < len; idx++) {\n    var word = words[idx];\n\n    if (word === '\\n' || word === '\\r') {\n      pushCurrLine();\n    } else {\n      var width = computeWidthOfText(word);\n      if (currWidth + width > maxWidth) pushCurrLine();\n      currLine += word;\n      currWidth += width;\n    }\n  }\n\n  pushCurrLine();\n  return lines;\n}; // See section \"7.9.4 Dates\" of the PDF specification\n\nvar dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\nexport var parseDate = function (dateStr) {\n  var match = dateStr.match(dateRegex);\n  if (!match) return undefined;\n  var year = match[1],\n      _a = match[2],\n      month = _a === void 0 ? '01' : _a,\n      _b = match[3],\n      day = _b === void 0 ? '01' : _b,\n      _c = match[4],\n      hours = _c === void 0 ? '00' : _c,\n      _d = match[5],\n      mins = _d === void 0 ? '00' : _d,\n      _e = match[6],\n      secs = _e === void 0 ? '00' : _e,\n      _f = match[7],\n      offsetSign = _f === void 0 ? 'Z' : _f,\n      _g = match[8],\n      offsetHours = _g === void 0 ? '00' : _g,\n      _h = match[9],\n      offsetMins = _h === void 0 ? '00' : _h; // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n\n  var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n  var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n  return date;\n};","map":{"version":3,"sources":["../../src/utils/strings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export var toCharCode = function (character) { return character.charCodeAt(0); };\nexport var toCodePoint = function (character) { return character.codePointAt(0); };\nexport var toHexStringOfMinLength = function (num, minLength) {\n    return padStart(num.toString(16), minLength, '0').toUpperCase();\n};\nexport var toHexString = function (num) { return toHexStringOfMinLength(num, 2); };\nexport var charFromCode = function (code) { return String.fromCharCode(code); };\nexport var charFromHexCode = function (hex) { return charFromCode(parseInt(hex, 16)); };\nexport var padStart = function (value, length, padChar) {\n    var padding = '';\n    for (var idx = 0, len = length - value.length; idx < len; idx++) {\n        padding += padChar;\n    }\n    return padding + value;\n};\nexport var copyStringIntoBuffer = function (str, buffer, offset) {\n    var length = str.length;\n    for (var idx = 0; idx < length; idx++) {\n        buffer[offset++] = str.charCodeAt(idx);\n    }\n    return length;\n};\nexport var addRandomSuffix = function (prefix, suffixLength) {\n    if (suffixLength === void 0) { suffixLength = 4; }\n    return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n};\nexport var escapeRegExp = function (str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nexport var cleanText = function (text) {\n    return text.replace(/\\t/g, '    ').replace(/[\\b\\v]/g, '');\n};\nvar buildWordBreakRegex = function (wordBreaks) {\n    var escapedRules = ['$'];\n    for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n        var wordBreak = wordBreaks[idx];\n        if (wordBreak.includes('\\n') || wordBreak.includes('\\r')) {\n            throw new TypeError('`wordBreak` must not include \\\\n or \\\\r');\n        }\n        escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n    }\n    var breakRules = escapedRules.join('|');\n    return new RegExp(\"(\\\\n|\\\\r)|((.*?)(\" + breakRules + \"))\", 'gm');\n};\nexport var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n    var regex = buildWordBreakRegex(wordBreaks);\n    var words = cleanText(text).match(regex);\n    var currLine = '';\n    var currWidth = 0;\n    var lines = [];\n    var pushCurrLine = function () {\n        if (currLine !== '')\n            lines.push(currLine);\n        currLine = '';\n        currWidth = 0;\n    };\n    for (var idx = 0, len = words.length; idx < len; idx++) {\n        var word = words[idx];\n        if (word === '\\n' || word === '\\r') {\n            pushCurrLine();\n        }\n        else {\n            var width = computeWidthOfText(word);\n            if (currWidth + width > maxWidth)\n                pushCurrLine();\n            currLine += word;\n            currWidth += width;\n        }\n    }\n    pushCurrLine();\n    return lines;\n};\n// See section \"7.9.4 Dates\" of the PDF specification\nvar dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\nexport var parseDate = function (dateStr) {\n    var match = dateStr.match(dateRegex);\n    if (!match)\n        return undefined;\n    var year = match[1], _a = match[2], month = _a === void 0 ? '01' : _a, _b = match[3], day = _b === void 0 ? '01' : _b, _c = match[4], hours = _c === void 0 ? '00' : _c, _d = match[5], mins = _d === void 0 ? '00' : _d, _e = match[6], secs = _e === void 0 ? '00' : _e, _f = match[7], offsetSign = _f === void 0 ? 'Z' : _f, _g = match[8], offsetHours = _g === void 0 ? '00' : _g, _h = match[9], offsetMins = _h === void 0 ? '00' : _h;\n    // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n    var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n    var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n    return date;\n};\n//# sourceMappingURL=strings.js.map"]},"metadata":{},"sourceType":"module"}
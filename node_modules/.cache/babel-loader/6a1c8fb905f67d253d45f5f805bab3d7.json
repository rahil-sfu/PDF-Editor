{"ast":null,"code":"import { Encodings, Font, FontNames } from '@pdf-lib/standard-fonts';\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { toCodePoint, toHexString } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\n\nvar StandardFontEmbedder =\n/** @class */\nfunction () {\n  function StandardFontEmbedder(fontName) {\n    // prettier-ignore\n    this.encoding = fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats : fontName === FontNames.Symbol ? Encodings.Symbol : Encodings.WinAnsi;\n    this.font = Font.load(fontName);\n    this.fontName = this.font.FontName;\n  }\n  /**\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\n   * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n   * encodings)\n   */\n\n\n  StandardFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var hexCodes = new Array(glyphs.length);\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexString(glyphs[idx].code);\n    }\n\n    return PDFHexString.of(hexCodes.join(''));\n  };\n\n  StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.encodeTextAsGlyphs(text);\n    var totalWidth = 0;\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var left = glyphs[idx].name;\n      var right = (glyphs[idx + 1] || {}).name;\n      var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n      totalWidth += this.widthOfGlyph(left) + kernAmount;\n    }\n\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n\n  StandardFontEmbedder.prototype.heightOfFontAtSize = function (size) {\n    var _a = this.font,\n        Ascender = _a.Ascender,\n        Descender = _a.Descender,\n        FontBBox = _a.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    return (yTop - yBottom) / 1000 * size;\n  };\n\n  StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n        Ascender = _a.Ascender,\n        Descender = _a.Descender,\n        FontBBox = _a.FontBBox;\n    var yTop = Ascender || FontBBox[3];\n    var yBottom = Descender || FontBBox[1];\n    return 1000 * height / (yTop - yBottom);\n  };\n\n  StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    var fontDict = context.obj({\n      Type: 'Font',\n      Subtype: 'Type1',\n      BaseFont: this.font.FontName,\n      Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined\n    });\n\n    if (ref) {\n      context.assign(ref, fontDict);\n      return ref;\n    } else {\n      return context.register(fontDict);\n    }\n  };\n\n  StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n    // Default to 250 if font doesn't specify a width\n    return this.font.getWidthOfGlyph(glyphName) || 250;\n  };\n\n  StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n    var codePoints = Array.from(text);\n    var glyphs = new Array(codePoints.length);\n\n    for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n      var codePoint = toCodePoint(codePoints[idx]);\n      glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n    }\n\n    return glyphs;\n  };\n\n  StandardFontEmbedder.for = function (fontName) {\n    return new StandardFontEmbedder(fontName);\n  };\n\n  return StandardFontEmbedder;\n}();\n\nexport default StandardFontEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/StandardFontEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Encodings, Font, FontNames, } from '@pdf-lib/standard-fonts';\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { toCodePoint, toHexString } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n */\nvar StandardFontEmbedder = /** @class */ (function () {\n    function StandardFontEmbedder(fontName) {\n        // prettier-ignore\n        this.encoding = (fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats\n            : fontName === FontNames.Symbol ? Encodings.Symbol\n                : Encodings.WinAnsi);\n        this.font = Font.load(fontName);\n        this.fontName = this.font.FontName;\n    }\n    /**\n     * Encode the JavaScript string into this font. (JavaScript encodes strings in\n     * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n     * encodings)\n     */\n    StandardFontEmbedder.prototype.encodeText = function (text) {\n        var glyphs = this.encodeTextAsGlyphs(text);\n        var hexCodes = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            hexCodes[idx] = toHexString(glyphs[idx].code);\n        }\n        return PDFHexString.of(hexCodes.join(''));\n    };\n    StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n        var glyphs = this.encodeTextAsGlyphs(text);\n        var totalWidth = 0;\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var left = glyphs[idx].name;\n            var right = (glyphs[idx + 1] || {}).name;\n            var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n            totalWidth += this.widthOfGlyph(left) + kernAmount;\n        }\n        var scale = size / 1000;\n        return totalWidth * scale;\n    };\n    StandardFontEmbedder.prototype.heightOfFontAtSize = function (size) {\n        var _a = this.font, Ascender = _a.Ascender, Descender = _a.Descender, FontBBox = _a.FontBBox;\n        var yTop = Ascender || FontBBox[3];\n        var yBottom = Descender || FontBBox[1];\n        return ((yTop - yBottom) / 1000) * size;\n    };\n    StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n        var _a = this.font, Ascender = _a.Ascender, Descender = _a.Descender, FontBBox = _a.FontBBox;\n        var yTop = Ascender || FontBBox[3];\n        var yBottom = Descender || FontBBox[1];\n        return (1000 * height) / (yTop - yBottom);\n    };\n    StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n        var fontDict = context.obj({\n            Type: 'Font',\n            Subtype: 'Type1',\n            BaseFont: this.font.FontName,\n            Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined,\n        });\n        if (ref) {\n            context.assign(ref, fontDict);\n            return ref;\n        }\n        else {\n            return context.register(fontDict);\n        }\n    };\n    StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n        // Default to 250 if font doesn't specify a width\n        return this.font.getWidthOfGlyph(glyphName) || 250;\n    };\n    StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n        var codePoints = Array.from(text);\n        var glyphs = new Array(codePoints.length);\n        for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n            var codePoint = toCodePoint(codePoints[idx]);\n            glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n        }\n        return glyphs;\n    };\n    StandardFontEmbedder.for = function (fontName) { return new StandardFontEmbedder(fontName); };\n    return StandardFontEmbedder;\n}());\nexport default StandardFontEmbedder;\n//# sourceMappingURL=StandardFontEmbedder.js.map"]},"metadata":{},"sourceType":"module"}
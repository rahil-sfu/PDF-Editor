{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js\";\nimport React from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Home from './Home'; // Make sure your Home component is exported properly\n\nimport PdfViewer from './PdfViewer'; // Make sure your PdfViewer component is exported\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/PdfViewer\",\n    element: /*#__PURE__*/React.createElement(PdfViewer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App; // import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n//       <hr/>\n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n//     </div>\n//   );\n// }\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js"],"names":["React","BrowserRouter","Routes","Route","Home","PdfViewer","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAO,WAAP;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AAEA,OAAOC,IAAP,MAAiB,QAAjB,C,CAAmC;;AACnC,OAAOC,SAAP,MAAsB,aAAtB,C,CAAqC;;AAErC,SAASC,GAAT,GAAe;AACb,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,OAAO,eAAE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,YAAZ;AAAyB,IAAA,OAAO,eAAE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD;;AAED,eAAeA,GAAfsourcesContent":["import React from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nimport Home from './Home';         // Make sure your Home component is exported properly\nimport PdfViewer from './PdfViewer'; // Make sure your PdfViewer component is exported\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/PdfViewer\" element={<PdfViewer />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n\n\n\n\n// import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n\n\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n      \n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n\n//       <hr/>\n      \n            \n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n      \n//     </div>\n//   );\n// }\n\n\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n// export default App;"]},"metadata":{},"sourceType":"module"}
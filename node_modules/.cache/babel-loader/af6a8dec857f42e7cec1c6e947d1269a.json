{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport samplePDF from \"./na.pdf\";\nimport SinglePage from './Components/SinglePage';\nimport ModifyPage from './Components/ModifyPage';\nimport AutoTextArea from './Components/AutoTextArea';\nimport { useNavigate, BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/PdfViewer\",\n    element: /*#__PURE__*/React.createElement(PdfViewer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction PdfViewer() {\n  var _location$state;\n\n  // retrieve file from the location state\n  const location = useLocation();\n  const uploadedFile = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.file) || null; // if there's an uploaded file, create a URL, otherwise use samplePDF\n\n  const pdfToRender = uploadedFile ? URL.createObjectURL(uploadedFile) : samplePDF;\n  const [result, setResult] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [redoStack, setRedoStack] = useState([]);\n  const [flag, setFlag] = useState(\"\");\n  const [bounds, setBounds] = useState({});\n  const [isText, setIsText] = useState(false);\n  const [buttonType, setButtonType] = useState(\"\");\n  const tempRef = useRef(null);\n  useEffect(() => {\n    if (isText) {\n      setIsText(false);\n    }\n  }, [result]); //Keep track of current page number\n\n  const pageChange = num => {\n    setPageNumber(num);\n  }; //Function to add text in PDF\n\n\n  const addText = () => {\n    //Flag to change cursor if text\n    setIsText(true);\n    document.getElementById(\"drawArea\").addEventListener(\"click\", e => {\n      e.preventDefault();\n      setResult(result => [...result, {\n        id: generateKey(e.pageX),\n        x: e.pageX,\n        y: e.pageY - 10,\n        text: \"\",\n        page: pageNumber,\n        type: \"text\",\n        ref: tempRef\n      }]);\n    }, {\n      once: true\n    });\n  }; //Undo function for both line and text\n\n\n  const undo = () => {\n    let temp = result.pop();\n\n    if (temp) {\n      if (temp.type === \"freehand\") {\n        //Flag for DrawArea reference\n        setFlag(\"undo\");\n      }\n\n      setRedoStack(stack => [...stack, temp]);\n      setResult(result);\n    }\n  }; //Flag for DrawArea reference\n\n\n  const changeFlag = () => {\n    setFlag(\"\");\n  }; //Redo functionality\n\n\n  const redo = () => {\n    let top = redoStack.pop();\n\n    if (top) {\n      if (top.type === \"freehand\") {\n        //Flag for DrawArea reference\n        setFlag(\"redo\");\n      }\n\n      setResult(res => [...res, top]);\n    }\n  };\n\n  const getPaths = el => {\n    setResult(res => [...res, el]);\n  };\n\n  const getBounds = obj => {\n    setBounds(obj);\n  };\n\n  const generateKey = pre => {\n    return `${pre}_${new Date().getTime()}`;\n  };\n\n  const onTextChange = (id, txt, ref) => {\n    let indx = result.findIndex(x => x.id === id);\n    let item = { ...result[indx]\n    };\n    item.text = txt;\n    item.ref = ref;\n    result[indx] = item;\n    setResult(result);\n  };\n\n  const changeButtonType = type => {\n    setButtonType(type);\n  };\n\n  const resetButtonType = () => {\n    setButtonType(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, result.map(res => {\n    if (res.type === \"text\") {\n      let isShowing = \"hidden\";\n\n      if (res.page === pageNumber) {\n        isShowing = \"visible\";\n      }\n\n      return /*#__PURE__*/React.createElement(AutoTextArea, {\n        key: res.id,\n        unique_key: res.id,\n        val: res.text,\n        onTextChange: onTextChange,\n        style: {\n          visibility: isShowing,\n          color: \"red\",\n          fontWeight: 'normal',\n          fontSize: 16,\n          zIndex: 20,\n          position: \"absolute\",\n          left: res.x + 'px',\n          top: res.y + 'px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      });\n    } else {\n      return null;\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: \"#3f51b5\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"PDF EDITOR\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: undo,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-undo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: redo,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-redo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addText,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => changeButtonType(\"draw\"),\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-pencil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => changeButtonType(\"download\"),\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(SinglePage, {\n    resetButtonType: resetButtonType,\n    buttonType: buttonType,\n    cursor: isText ? \"text\" : \"default\",\n    pdf: pdfToRender,\n    pageChange: pageChange,\n    getPaths: getPaths,\n    flag: flag,\n    getBounds: getBounds,\n    changeFlag: changeFlag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ModifyPage, {\n    resetButtonType: resetButtonType,\n    buttonType: buttonType,\n    pdf: pdfToRender,\n    result: result,\n    bounds: bounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Home() {\n  const [dragging, setDragging] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState('');\n  const navigate = useNavigate();\n\n  const handleDragEnter = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  };\n\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const droppedFile = e.dataTransfer.files[0];\n      setFile(droppedFile);\n      setFileName(droppedFile.name);\n      e.dataTransfer.clearData();\n    }\n  };\n\n  const handleFileInput = e => {\n    const uploadedFile = e.target.files[0];\n\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setFileName(uploadedFile.name);\n    }\n  }; // Whenever fileName changes, navigate to PdfViewer with the file\n\n\n  useEffect(() => {\n    if (file && fileName) {\n      navigate('/PdfViewer', {\n        state: {\n          file\n        }\n      });\n    }\n  }, [file, fileName, navigate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `drag-drop-zone ${dragging ? 'dragging' : ''}`,\n    onDragEnter: handleDragEnter,\n    onDragOver: e => e.preventDefault(),\n    onDragLeave: handleDragLeave,\n    onDrop: handleDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, \"Drag and drop a file here or click the button below to upload.\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"fileInput\",\n    style: {\n      display: 'none'\n    },\n    onChange: handleFileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"fileInput\",\n    className: \"upload-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, \"Select File\"), fileName && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 24\n    }\n  }, \"Uploaded File: \", fileName))));\n}\n\nexport default App; // import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n//       <hr/>\n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n//     </div>\n//   );\n// }\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js"],"names":["React","useState","useEffect","useRef","samplePDF","SinglePage","ModifyPage","AutoTextArea","useNavigate","BrowserRouter","Routes","Route","useLocation","App","PdfViewer","location","uploadedFile","state","file","pdfToRender","URL","createObjectURL","result","setResult","pageNumber","setPageNumber","redoStack","setRedoStack","flag","setFlag","bounds","setBounds","isText","setIsText","buttonType","setButtonType","tempRef","pageChange","num","addText","document","getElementById","addEventListener","e","preventDefault","id","generateKey","pageX","x","y","pageY","text","page","type","ref","once","undo","temp","pop","stack","changeFlag","redo","top","res","getPaths","el","getBounds","obj","pre","Date","getTime","onTextChange","txt","indx","findIndex","item","changeButtonType","resetButtonType","map","isShowing","visibility","color","fontWeight","fontSize","zIndex","position","left","marginTop","marginBottom","Home","dragging","setDragging","setFile","fileName","setFileName","navigate","handleDragEnter","stopPropagation","handleDragLeave","handleDrop","dataTransfer","files","length","droppedFile","name","clearData","handleFileInput","target","display"],"mappings":"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;AACE,IAAA,SAAS,EAAG,kBAAiBL,QAAQ,GAAG,UAAH,GAAgB,EAAG,EAD1D;AAEE,IAAA,WAAW,EAAEM,eAFf;AAGE,IAAA,UAAU,EAAGrD,CAAD,IAAOA,CAAC,CAACC,cAAF,EAHrB;AAIE,IAAA,WAAW,EAAEsD,eAJf;AAKE,IAAA,MAAM,EAAEC,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAPF,eAQE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,WAFL;AAGE,IAAA,KAAK,EAAE;AAAES,MAAAA,OAAO,EAAE;AAAX,KAHT;AAIE,IAAA,QAAQ,EAAEF,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAcE;AAAO,IAAA,OAAO,EAAC,WAAf;AAA2B,IAAA,SAAS,EAAC,eAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdF,EAiBGb,QAAQ,iBAAI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAyCA,QAAzC,CAjBf,CADF,CADF,CADF;AAyBD;;AAED,eAAehF,GAAf,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport samplePDF from \"./na.pdf\";\nimport SinglePage from './Components/SinglePage';\nimport ModifyPage from './Components/ModifyPage';\nimport AutoTextArea from './Components/AutoTextArea';\n\nimport { useNavigate, BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/PdfViewer\" element={<PdfViewer />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nfunction PdfViewer() {\n  // retrieve file from the location state\n  const location = useLocation();\n  const uploadedFile = location.state?.file || null;\n\n  // if there's an uploaded file, create a URL, otherwise use samplePDF\n  const pdfToRender = uploadedFile ? URL.createObjectURL(uploadedFile) : samplePDF;\n\n  const [result, setResult] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [redoStack, setRedoStack] = useState([]);\n  const [flag, setFlag] = useState(\"\");\n  const [bounds, setBounds] = useState({});\n  const [isText, setIsText] = useState(false);\n  const [buttonType, setButtonType] = useState(\"\");\n  const tempRef = useRef(null);\n\n  useEffect(() => {\n    if (isText) {\n      setIsText(false);\n    }\n  }, [result]);\n\n  //Keep track of current page number\n  const pageChange = (num) => {\n    setPageNumber(num);\n  };\n\n  //Function to add text in PDF\n  const addText = () => {\n    //Flag to change cursor if text\n    setIsText(true);\n    document.getElementById(\"drawArea\").addEventListener(\n      \"click\",\n      (e) => {\n        e.preventDefault();\n        setResult((result) => [\n          ...result,\n          {\n            id: generateKey(e.pageX),\n            x: e.pageX,\n            y: e.pageY - 10,\n            text: \"\",\n            page: pageNumber,\n            type: \"text\",\n            ref: tempRef,\n          },\n        ]);\n      },\n      { once: true }\n    );\n  };\n\n  //Undo function for both line and text\n  const undo = () => {\n    let temp = result.pop();\n    if (temp) {\n      if (temp.type === \"freehand\") {\n        //Flag for DrawArea reference\n        setFlag(\"undo\");\n      }\n      setRedoStack((stack) => [...stack, temp]);\n      setResult(result);\n    }\n  };\n\n  //Flag for DrawArea reference\n  const changeFlag = () => {\n    setFlag(\"\");\n  };\n\n  //Redo functionality\n  const redo = () => {\n    let top = redoStack.pop();\n    if (top) {\n      if (top.type === \"freehand\") {\n        //Flag for DrawArea reference\n        setFlag(\"redo\");\n      }\n      setResult((res) => [...res, top]);\n    }\n  };\n\n  const getPaths = (el) => {\n    setResult((res) => [...res, el]);\n  };\n\n  const getBounds = (obj) => {\n    setBounds(obj);\n  };\n\n  const generateKey = (pre) => {\n    return `${pre}_${new Date().getTime()}`;\n  };\n\n  const onTextChange = (id, txt, ref) => {\n    let indx = result.findIndex((x) => x.id === id);\n    let item = { ...result[indx] };\n    item.text = txt;\n    item.ref = ref;\n    result[indx] = item;\n    setResult(result);\n  };\n\n  const changeButtonType = (type) => {\n    setButtonType(type);\n  };\n\n  const resetButtonType = () => {\n    setButtonType(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      {result.map((res) => {\n        if (res.type === \"text\") {\n          let isShowing = \"hidden\";\n          if (res.page === pageNumber) {\n            isShowing = \"visible\";\n          }\n          return (\n            <AutoTextArea\n              key={res.id}\n              unique_key={res.id}\n              val={res.text}\n              onTextChange={onTextChange}\n              style={{\n                visibility: isShowing,\n                color: \"red\",\n                fontWeight: 'normal',\n                fontSize: 16,\n                zIndex: 20,\n                position: \"absolute\",\n                left: res.x + 'px',\n                top: res.y + 'px'\n              }}\n            />\n          );\n        } else {\n          return null;\n        }\n      })}\n\n      <h1 style={{ color: \"#3f51b5\" }}>PDF EDITOR</h1>\n      <hr />\n\n      <div className=\"navbar\">\n        <button onClick={undo} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-undo\"></i>\n        </button>\n        <button onClick={redo} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-redo\"></i>\n        </button>\n        <button onClick={addText} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-text\"></i>\n        </button>\n        <button\n          onClick={() => changeButtonType(\"draw\")}\n          style={{ marginTop: \"1%\", marginBottom: \"1%\" }}\n        >\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-pencil\"></i>\n        </button>\n        <button\n          onClick={() => changeButtonType(\"download\")}\n          style={{ marginTop: \"1%\", marginBottom: \"1%\" }}\n        >\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-download\"></i>\n        </button>\n      </div>\n\n      {/* Use pdfToRender (uploaded file or sample) instead of samplePDF */}\n      <SinglePage\n        resetButtonType={resetButtonType}\n        buttonType={buttonType}\n        cursor={isText ? \"text\" : \"default\"}\n        pdf={pdfToRender}\n        pageChange={pageChange}\n        getPaths={getPaths}\n        flag={flag}\n        getBounds={getBounds}\n        changeFlag={changeFlag}\n      />\n      <ModifyPage\n        resetButtonType={resetButtonType}\n        buttonType={buttonType}\n        pdf={pdfToRender}\n        result={result}\n        bounds={bounds}\n      />\n      <hr />\n    </div>\n  );\n}\n\nfunction Home() {\n  const [dragging, setDragging] = useState(false);\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState('');\n  const navigate = useNavigate();\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const droppedFile = e.dataTransfer.files[0];\n      setFile(droppedFile);\n      setFileName(droppedFile.name);\n      e.dataTransfer.clearData();\n    }\n  };\n\n  const handleFileInput = (e) => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setFileName(uploadedFile.name);\n    }\n  };\n\n  // Whenever fileName changes, navigate to PdfViewer with the file\n  useEffect(() => {\n    if (file && fileName) {\n      navigate('/PdfViewer', { state: { file } });\n    }\n  }, [file, fileName, navigate]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n          onDragEnter={handleDragEnter}\n          onDragOver={(e) => e.preventDefault()}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n        >\n          <p>Drag and drop a file here or click the button below to upload.</p>\n          <input\n            type=\"file\"\n            id=\"fileInput\"\n            style={{ display: 'none' }}\n            onChange={handleFileInput}\n          />\n          <label htmlFor=\"fileInput\" className=\"upload-button\">\n            Select File\n          </label>\n          {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n// import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n\n\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n      \n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n\n//       <hr/>\n      \n            \n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n      \n//     </div>\n//   );\n// }\n\n\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n// export default App;"]},"metadata":{},"sourceType":"module"}
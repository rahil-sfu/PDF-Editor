{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/Components/DrawArea.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Immutable from 'immutable';\n\nfunction DrawArea(props) {\n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [redoEl, setRedoEl] = useState([]);\n  const [isCrosshair, setIsCrosshair] = useState(false);\n  const drawAreaEl = useRef(null);\n  useEffect(() => {\n    document.getElementById(\"drawArea\").addEventListener(\"mouseup\", handleMouseUp);\n    props.getBounds({\n      x: drawAreaEl.current.getBoundingClientRect().left,\n      y: drawAreaEl.current.getBoundingClientRect().bottom\n    });\n    return () => {\n      document.getElementById(\"drawArea\").removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, []);\n  useEffect(() => {\n    if (props.flag === \"undo\") {\n      setRedoEl(arr => [...arr, lines.pop()]);\n      setLines(lines);\n    }\n\n    if (props.flag === \"redo\") {\n      setLines(lines => [...lines, redoEl.pop()]);\n    }\n\n    props.changeFlag();\n  }, [props.flag]);\n  useEffect(() => {\n    if (props.buttonType === \"draw\") {\n      addMouseDown();\n      props.resetButtonType();\n    }\n  }, [props.buttonType]);\n  useEffect(() => {\n    if (isDrawing === false && lines.length) {\n      props.getPaths(lines[lines.length - 1]);\n    }\n  }, [isDrawing]);\n\n  const handleMouseUp = () => {\n    setIsCrosshair(false);\n    setIsDrawing(false);\n  };\n\n  const handleMouseDown = e => {\n    if (e.button !== 0) {\n      return;\n    }\n\n    const point = relativeCoordinatesForEvent(e);\n    let obj = {\n      arr: [point],\n      page: props.page,\n      type: \"freehand\"\n    };\n    setLines(prevlines => [...prevlines, obj]);\n    setIsDrawing(true);\n  };\n\n  const handleMouseMove = e => {\n    if (!isDrawing) {\n      return;\n    }\n\n    const point = relativeCoordinatesForEvent(e);\n    let last = lines.pop();\n    last.arr.push(point);\n    setLines(prevlines => [...prevlines, last]);\n  };\n\n  const relativeCoordinatesForEvent = e => {\n    const boundingRect = drawAreaEl.current.getBoundingClientRect();\n    return new Immutable.Map({\n      x: e.clientX - boundingRect.left,\n      y: e.clientY - boundingRect.top\n    });\n  };\n\n  const addMouseDown = () => {\n    setIsCrosshair(true);\n    document.getElementById(\"drawArea\").addEventListener(\"mousedown\", handleMouseDown, {\n      once: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"drawArea\",\n    ref: drawAreaEl,\n    style: isCrosshair ? {\n      cursor: \"crosshair\"\n    } : {\n      cursor: props.cursor\n    },\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, props.children, /*#__PURE__*/React.createElement(Drawing, {\n    lines: lines,\n    page: props.page,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  })));\n}\n\nfunction Drawing({\n  lines,\n  page\n}) {\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"drawing\",\n    style: {\n      zIndex: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, lines.map((line, index) => /*#__PURE__*/React.createElement(DrawingLine, {\n    key: index,\n    line: line,\n    page: page,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction DrawingLine({\n  line,\n  page\n}) {\n  const pathData = \"M \" + line.arr.map(p => {\n    return `${p.get('x')},${p.get('y')}`;\n  }).join(\" L \");\n\n  if (line.page === page) {\n    return /*#__PURE__*/React.createElement(\"path\", {\n      className: \"path\",\n      d: pathData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return null;\n}\n\nexport default DrawArea;","map":{"version":3,"sources":["/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/Components/DrawArea.js"],"names":["React","useState","useEffect","useRef","Immutable","DrawArea","props","lines","setLines","isDrawing","setIsDrawing","redoEl","setRedoEl","isCrosshair","setIsCrosshair","drawAreaEl","document","getElementById","addEventListener","handleMouseUp","getBounds","x","current","getBoundingClientRect","left","y","bottom","removeEventListener","flag","arr","pop","changeFlag","buttonType","addMouseDown","resetButtonType","length","getPaths","handleMouseDown","e","button","point","relativeCoordinatesForEvent","obj","page","type","prevlines","handleMouseMove","last","push","boundingRect","Map","clientX","clientY","top","once","cursor","children","Drawing","zIndex","map","line","index","DrawingLine","pathData","p","get","join"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Immutable from 'immutable'\n\nfunction DrawArea(props) {\n  \n  const [lines, setLines] = useState([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [redoEl, setRedoEl] = useState([]);\n  const [isCrosshair, setIsCrosshair] = useState(false);\n  const drawAreaEl = useRef(null);\n\n  useEffect(() => {\n    document.getElementById(\"drawArea\").addEventListener(\"mouseup\", handleMouseUp);\n    props.getBounds({\n      x: drawAreaEl.current.getBoundingClientRect().left,\n      y: drawAreaEl.current.getBoundingClientRect().bottom,\n    })\n    return () => {\n      document.getElementById(\"drawArea\").removeEventListener(\"mouseup\", handleMouseUp);\n    }\n  },[])\n\n  useEffect(() => {\n    if(props.flag === \"undo\")\n    {\n      setRedoEl(arr => [...arr,lines.pop()]);\n      setLines(lines);\n    }\n    if(props.flag === \"redo\")\n    {\n      setLines(lines => [...lines,redoEl.pop()]);\n    }\n    props.changeFlag();\n  },[props.flag])\n\n  useEffect(() => {\n    if(props.buttonType === \"draw\")\n    {\n      addMouseDown();\n      props.resetButtonType();\n    }\n  },[props.buttonType])\n\n  useEffect(() => {\n    if(isDrawing === false && lines.length)\n    {\n      props.getPaths(lines[lines.length-1]);\n    }\n  },[isDrawing])\n\n  const handleMouseUp = () => {\n    setIsCrosshair(false);\n    setIsDrawing(false);\n  }\n\n  const handleMouseDown = (e) => {\n\n    if (e.button !== 0) {\n      return;\n    }\n    const point = relativeCoordinatesForEvent(e);\n    let obj = {\n      arr: [point],\n      page: props.page,\n      type: \"freehand\",\n    }\n    setLines(prevlines => [...prevlines,obj]);\n    setIsDrawing(true);\n  }\n\n  const handleMouseMove = (e) => {\n    if (!isDrawing) {\n      return;\n    }\n    const point = relativeCoordinatesForEvent(e);\n    let last = lines.pop();\n    last.arr.push(point);\n    setLines(prevlines =>[...prevlines,last]);  \n  }\n\n\n  const relativeCoordinatesForEvent = (e) => {\n    const boundingRect = drawAreaEl.current.getBoundingClientRect();\n    return new Immutable.Map({\n      x: e.clientX - boundingRect.left,\n      y: e.clientY - boundingRect.top,\n    });\n  }\n\n  const addMouseDown = () => {\n    setIsCrosshair(true);\n    document.getElementById(\"drawArea\").addEventListener(\"mousedown\",handleMouseDown, { once: true });\n  }\n\n  return (\n    <>\n    {/*<button onClick = {addMouseDown} style = {{marginBottom: \"1%\", marginTop: \"1%\"}}>Draw</button>*/}\n    <div\n        id=\"drawArea\"\n        ref={drawAreaEl}\n        style = {isCrosshair ? {cursor: \"crosshair\"} : {cursor: props.cursor}}\n        onMouseMove={handleMouseMove}\n    >\n      {props.children}\n      <Drawing lines={lines} page = {props.page}/>\n    </div>\n    </>\n  )\n\n}\n\nfunction Drawing({ lines, page }) {\n  return (\n    <svg className=\"drawing\" style = {{zIndex:10}}>\n      {lines.map((line, index) => (\n        <DrawingLine key={index} line={line} page = {page}/>\n      ))}\n    </svg>\n  );\n}\n\nfunction DrawingLine({ line, page }) {\n  const pathData = \"M \" +\n    line.arr\n      .map(p => {\n        return `${p.get('x')},${p.get('y')}`;\n      })\n      .join(\" L \");\n  \n  if(line.page === page)\n  {\n    return <path className=\"path\" d={pathData} />;\n  }\n  return null;\n}\n\nexport default DrawArea"]},"metadata":{},"sourceType":"module"}
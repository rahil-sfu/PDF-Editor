{"ast":null,"code":"/**\n * @remix-run/router v1.21.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to); // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1; // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\n\n\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\n\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  } // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n\n\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized;\n\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = []; // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null; // If errors exist, don't consider routes below the boundary\n\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = new Set(); // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let unblockBlockerHistoryUpdate = undefined; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n\n\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    }); // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true; // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    } // Short circuit with a 404 on the root error boundary if we match nothing\n\n\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n\n      if (actionResult.shortCircuited) {\n        return;\n      } // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n\n\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false; // No need to do fog of war matching again on loader execution\n\n      fogOfWar.active = false; // Create a GET request for the loaders\n\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    } // Call our action and get the result\n\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation); // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration); // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n\n      updateState(updates, {\n        flushSync\n      });\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(loaderResults);\n\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    redirect = findRedirect(fetcherResults);\n\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    }); // Preserve SSR errors during partial hydration\n\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    } // Call the action for the fetcher\n\n\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    } // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n\n\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } // Let SuccessResult's fall through for revalidation\n\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      } // Process any non-redirect errors thrown\n\n\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n\n    redirect = findRedirect(fetcherResults);\n\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    } // Call the loader for this fetcher route match\n\n\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id]; // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches; // Kick off loaders and fetchers in parallel\n\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id]; // Fetcher results are keyed by fetcher key from here on out, not routeId\n\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key); // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n\n    return {\n      active: false,\n      matches: null\n    };\n  }\n\n  async function discoverRoutes(matches, pathname, signal) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n\n    let partialMatches = matches;\n\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true); // Avoid loops if the second pass results in the same partial matches\n\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties); // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n\n\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n\n        return e.result;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n\n      let result = results[match.route.id];\n\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result; // Throw redirects and let the server handle them with an HTTP redirect\n\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Account for `?index` params when routing to the current location\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n\n  return matches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryMatches = matches;\n\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  } // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n\n\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  } // No loader, nothing to initialize\n\n\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined; // Don't run if we error'd during SSR\n\n  if (!hasData && hasError) {\n    return false;\n  } // Explicitly opting-in to running on hydration\n\n\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  } // Otherwise, run if we're not yet initialized with anything\n\n\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n\n  let childrenToPatch;\n\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n\n    if (!route.children) {\n      route.children = [];\n    }\n\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  } // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n\n\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  } // Second is by pathing differences\n\n\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  } // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n\n\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  } // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n\n\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\n\n\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\n\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id); // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  }); // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  }); // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {// No-op\n  }\n\n  return results;\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\n\n\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject; // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type]; // If we have a route.lazy promise, await that first\n\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n\n      if (result.data instanceof Error) {\n        var _result$init;\n\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      } // Convert thrown data() to ErrorResponse instances\n\n\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Support relative routing in internal redirects\n\n\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n\n  return location;\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined; // Process loader results into state.loaderData/state.errors\n\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  ); // Process results from our revalidating fetchers\n\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\"); // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\n\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId); // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId); // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","AbortedDeferredError","DeferredData","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","deferredKeys","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","findIndex","shouldLoadRouteOnHydration","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","unblockBlockerHistoryUpdate","initialize","_ref","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","viewTransitionOpts","flushSync","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","fogMatches","isNonHMR","localManifest","patch","patchRoutesImpl","newMatches","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","v7_throwAbortReason","query","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","getResolveToMatches","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","append","qs","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","hydrate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","childrenToPatch","uniqueChildren","newRoute","existingRoute","isSameRoute","aChild","bChild","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","isDeferredData","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","isRevalidatingLoader","unwrap","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport type AgnosticPatchRoutesOnNavigationFunctionArgs<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = {\n  path: string;\n  matches: M[];\n  patch: (routeId: string | null, children: O[]) => void;\n};\n\nexport type AgnosticPatchRoutesOnNavigationFunction<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = (\n  opts: AgnosticPatchRoutesOnNavigationFunctionArgs<O, M>\n) => void | Promise<void>;\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      viewTransitionOpts?: ViewTransitionOpts;\n      flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches\n        .slice(0, idx + 1)\n        .every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach((key) => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach((key) => deletedFetchers.delete(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error: discoverResult.error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    abortFetcher(key);\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        abortFetcher(staleKey);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset,\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties\n            );\n          },\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search\n        ? path.search.replace(/^\\?/, \"?index&\")\n        : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string,\n  includeBoundary = false\n) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  initialHydration: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      initialHydration ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(\n  route: AgnosticDataRouteObject,\n  loaderData: RouteData | null | undefined,\n  errors: RouteData | null | undefined\n) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  let childrenToPatch: AgnosticDataRouteObject[];\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(\n    (newRoute) =>\n      !childrenToPatch.some((existingRoute) =>\n        isSameRoute(newRoute, existingRoute)\n      )\n  );\n\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(\n  newRoute: AgnosticRouteObject,\n  existingRoute: AgnosticRouteObject\n): boolean {\n  // Most optimal check is by id\n  if (\n    \"id\" in newRoute &&\n    \"id\" in existingRoute &&\n    newRoute.id === existingRoute.id\n  ) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (\n    !(\n      newRoute.index === existingRoute.index &&\n      newRoute.path === existingRoute.path &&\n      newRoute.caseSensitive === existingRoute.caseSensitive\n    )\n  ) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if (\n    (!newRoute.children || newRoute.children.length === 0) &&\n    (!existingRoute.children || existingRoute.children.length === 0)\n  ) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children!.every((aChild, i) =>\n    existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}
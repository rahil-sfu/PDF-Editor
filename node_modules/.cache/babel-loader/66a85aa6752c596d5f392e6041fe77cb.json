{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport samplePDF from \"./na.pdf\";\nimport SinglePage from './Components/SinglePage';\nimport ModifyPage from './Components/ModifyPage';\nimport AutoTextArea from './Components/AutoTextArea';\nimport { useNavigate, BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/PdfViewer\",\n    element: /*#__PURE__*/React.createElement(PdfViewer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction PdfViewer() {\n  const location = useLocation(); // Get the passed file from Home component\n\n  const [pdfFile, setPdfFile] = useState(samplePDF); // Default PDF file\n\n  const [result, setResult] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [redoStack, setRedoStack] = useState([]);\n  const [flag, setFlag] = useState(\"\");\n  const [bounds, setBounds] = useState({});\n  const [isText, setIsText] = useState(false);\n  const [buttonType, setButtonType] = useState(\"\");\n  const tempRef = useRef(null);\n  useEffect(() => {\n    var _location$state;\n\n    // If file is passed from Home component, set it as pdfFile\n    if ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.file) {\n      setPdfFile(URL.createObjectURL(location.state.file));\n    }\n  }, [location.state]);\n  useEffect(() => {\n    if (isText) {\n      setIsText(false);\n    }\n  }, [result]);\n\n  const pageChange = num => setPageNumber(num);\n\n  const addText = () => {\n    setIsText(true);\n    document.getElementById(\"drawArea\").addEventListener(\"click\", e => {\n      e.preventDefault();\n      setResult(result => [...result, {\n        id: generateKey(e.pageX),\n        x: e.pageX,\n        y: e.pageY - 10,\n        text: \"\",\n        page: pageNumber,\n        type: \"text\",\n        ref: tempRef\n      }]);\n    }, {\n      once: true\n    });\n  };\n\n  const undo = () => {\n    let temp = result.pop();\n\n    if (temp) {\n      if (temp.type === \"freehand\") {\n        setFlag(\"undo\");\n      }\n\n      setRedoStack(stack => [...stack, temp]);\n      setResult([...result]);\n    }\n  };\n\n  const redo = () => {\n    let top = redoStack.pop();\n\n    if (top) {\n      if (top.type === \"freehand\") {\n        setFlag(\"redo\");\n      }\n\n      setResult(res => [...res, top]);\n    }\n  };\n\n  const getPaths = el => setResult(res => [...res, el]);\n\n  const getBounds = obj => setBounds(obj);\n\n  const generateKey = pre => `${pre}_${new Date().getTime()}`;\n\n  const onTextChange = (id, txt, ref) => {\n    let indx = result.findIndex(x => x.id === id);\n    let item = { ...result[indx]\n    };\n    item.text = txt;\n    item.ref = ref;\n    result[indx] = item;\n    setResult([...result]);\n  }; // Function to handle new file upload\n\n\n  const handleNewFileUpload = e => {\n    const file = e.target.files[0];\n\n    if (file) {\n      setPdfFile(URL.createObjectURL(file));\n    }\n  };\n\n  const changeButtonType = type => setButtonType(type);\n\n  const resetButtonType = () => setButtonType(\"\");\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, result.map(res => {\n    if (res.type === \"text\") {\n      let isShowing = res.page === pageNumber ? \"visible\" : \"hidden\";\n      return /*#__PURE__*/React.createElement(AutoTextArea, {\n        key: res.id,\n        unique_key: res.id,\n        val: res.text,\n        onTextChange: onTextChange,\n        style: {\n          visibility: isShowing,\n          color: \"red\",\n          fontWeight: 'normal',\n          fontSize: 16,\n          zIndex: 20,\n          position: \"absolute\",\n          left: res.x + 'px',\n          top: res.y + 'px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      });\n    }\n\n    return null;\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: \"#3f51b5\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \" PDF EDITOR\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleNewFileUpload,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\",\n      cursor: \"pointer\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: undo,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-undo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: redo,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-redo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addText,\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => changeButtonType(\"draw\"),\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-pencil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 108\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => changeButtonType(\"download\"),\n    style: {\n      marginTop: \"1%\",\n      marginBottom: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    style: {\n      fontSize: 25\n    },\n    className: \"fa fa-fw fa-download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 112\n    }\n  }))), /*#__PURE__*/React.createElement(SinglePage, {\n    resetButtonType: resetButtonType,\n    buttonType: buttonType,\n    cursor: isText ? \"text\" : \"default\",\n    pdf: pdfFile,\n    pageChange: pageChange,\n    getPaths: getPaths,\n    flag: flag,\n    getBounds: getBounds,\n    changeFlag: () => setFlag(\"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ModifyPage, {\n    resetButtonType: resetButtonType,\n    buttonType: buttonType,\n    pdf: pdfFile,\n    result: result,\n    bounds: bounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Home() {\n  const [dragging, setDragging] = useState(false);\n  const [fileName, setFileName] = useState('');\n  const [selectedFile, setSelectedFile] = useState(null);\n  const navigate = useNavigate();\n\n  const handleDragEnter = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  };\n\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      setFileName(file.name);\n      setSelectedFile(file);\n      e.dataTransfer.clearData();\n    }\n  };\n\n  const handleFileInput = e => {\n    const file = e.target.files[0];\n\n    if (file) {\n      setFileName(file.name);\n      setSelectedFile(file);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedFile) {\n      navigate('/PdfViewer', {\n        state: {\n          file: selectedFile\n        }\n      });\n    }\n  }, [selectedFile, navigate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `drag-drop-zone ${dragging ? 'dragging' : ''}`,\n    onDragEnter: handleDragEnter,\n    onDragOver: e => e.preventDefault(),\n    onDragLeave: handleDragLeave,\n    onDrop: handleDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"Drag and drop a file here or click the button below to upload.\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"fileInput\",\n    style: {\n      display: 'none'\n    },\n    onChange: handleFileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"fileInput\",\n    className: \"upload-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }, \"Select File\"), fileName && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 24\n    }\n  }, \"Uploaded File: \", fileName))));\n}\n\nexport default App; // import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n//       <hr/>\n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n//     </div>\n//   );\n// }\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/mac/Desktop/PdfEditor/react-pdf-editor/src/App.js"],"names":["React","useState","useEffect","useRef","samplePDF","SinglePage","ModifyPage","AutoTextArea","useNavigate","BrowserRouter","Routes","Route","useLocation","App","PdfViewer","location","pdfFile","setPdfFile","result","setResult","pageNumber","setPageNumber","redoStack","setRedoStack","flag","setFlag","bounds","setBounds","isText","setIsText","buttonType","setButtonType","tempRef","state","file","URL","createObjectURL","pageChange","num","addText","document","getElementById","addEventListener","e","preventDefault","id","generateKey","pageX","x","y","pageY","text","page","type","ref","once","undo","temp","pop","stack","redo","top","res","getPaths","el","getBounds","obj","pre","Date","getTime","onTextChange","txt","indx","findIndex","item","handleNewFileUpload","target","files","changeButtonType","resetButtonType","map","isShowing","visibility","color","fontWeight","fontSize","zIndex","position","left","marginTop","marginBottom","cursor","Home","dragging","setDragging","fileName","setFileName","selectedFile","setSelectedFile","navigate","handleDragEnter","stopPropagation","handleDragLeave","handleDrop","dataTransfer","length","name","clearData","handleFileInput","display"],"mappings":"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":["import React, { useState, useEffect, useRef } from 'react';\nimport './PdfViewer.css';\nimport './App.css';\nimport samplePDF from \"./na.pdf\";\nimport SinglePage from './Components/SinglePage';\nimport ModifyPage from './Components/ModifyPage';\nimport AutoTextArea from './Components/AutoTextArea';\nimport { useNavigate, BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/PdfViewer\" element={<PdfViewer />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nfunction PdfViewer() {\n  const location = useLocation(); // Get the passed file from Home component\n  const [pdfFile, setPdfFile] = useState(samplePDF); // Default PDF file\n  const [result, setResult] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [redoStack, setRedoStack] = useState([]);\n  const [flag, setFlag] = useState(\"\");\n  const [bounds, setBounds] = useState({});\n  const [isText, setIsText] = useState(false);\n  const [buttonType, setButtonType] = useState(\"\");\n  const tempRef = useRef(null);\n\n  useEffect(() => {\n    // If file is passed from Home component, set it as pdfFile\n    if (location.state?.file) {\n      setPdfFile(URL.createObjectURL(location.state.file));\n    }\n  }, [location.state]);\n\n  useEffect(() => {\n    if (isText) {\n      setIsText(false);\n    }\n  }, [result]);\n\n  const pageChange = (num) => setPageNumber(num);\n\n  const addText = () => {\n    setIsText(true);\n    document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      setResult((result) => [\n        ...result,\n        { id: generateKey(e.pageX), x: e.pageX, y: e.pageY - 10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef },\n      ]);\n    }, { once: true });\n  };\n\n  const undo = () => {\n    let temp = result.pop();\n    if (temp) {\n      if (temp.type === \"freehand\") {\n        setFlag(\"undo\");\n      }\n      setRedoStack((stack) => [...stack, temp]);\n      setResult([...result]);\n    }\n  };\n\n  const redo = () => {\n    let top = redoStack.pop();\n    if (top) {\n      if (top.type === \"freehand\") {\n        setFlag(\"redo\");\n      }\n      setResult((res) => [...res, top]);\n    }\n  };\n\n  const getPaths = (el) => setResult((res) => [...res, el]);\n  const getBounds = (obj) => setBounds(obj);\n  const generateKey = (pre) => `${pre}_${new Date().getTime()}`;\n  const onTextChange = (id, txt, ref) => {\n    let indx = result.findIndex((x) => x.id === id);\n    let item = { ...result[indx] };\n    item.text = txt;\n    item.ref = ref;\n    result[indx] = item;\n    setResult([...result]);\n  };\n\n    // Function to handle new file upload\n  const handleNewFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setPdfFile(URL.createObjectURL(file));\n    }\n  };\n\n  const changeButtonType = (type) => setButtonType(type);\n  const resetButtonType = () => setButtonType(\"\");\n\n  return (\n    <div className=\"App\">\n      {\n        result.map((res) => {\n          if (res.type === \"text\") {\n            let isShowing = res.page === pageNumber ? \"visible\" : \"hidden\";\n            return (\n              <AutoTextArea\n                key={res.id}\n                unique_key={res.id}\n                val={res.text}\n                onTextChange={onTextChange}\n                style={{ visibility: isShowing, color: \"red\", fontWeight: 'normal', fontSize: 16, zIndex: 20, position: \"absolute\", left: res.x + 'px', top: res.y + 'px' }}\n              />\n            );\n          }\n          return null;\n        })\n      }\n      <h1 style={{ color: \"#3f51b5\" }}> PDF EDITOR</h1>\n      <hr />\n      <div className=\"navbar\">\n         {/* New File Upload Button */}\n          <button onClick= {handleNewFileUpload} style={{ marginTop: \"1%\", marginBottom: \"1%\", cursor: \"pointer\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-upload\"></i>\n        </button>\n\n        <button onClick={undo} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-undo\"></i>\n        </button>\n        <button onClick={redo} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-redo\"></i>\n        </button>\n        <button onClick={addText} style={{ marginTop: \"1%\", marginBottom: \"1%\" }}>\n          <i style={{ fontSize: 25 }} className=\"fa fa-fw fa-text\"></i>\n        </button>\n\n        <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n        <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n\n      </div>\n\n      <SinglePage resetButtonType={resetButtonType} buttonType={buttonType} cursor={isText ? \"text\" : \"default\"} pdf={pdfFile} pageChange={pageChange} getPaths={getPaths} flag={flag} getBounds={getBounds} changeFlag={() => setFlag(\"\")} />\n      <ModifyPage resetButtonType={resetButtonType} buttonType={buttonType} pdf={pdfFile} result={result} bounds={bounds} />\n      <hr />\n    </div>\n  );\n}\n\nfunction Home() {\n  const [dragging, setDragging] = useState(false);\n  const [fileName, setFileName] = useState('');\n  const [selectedFile, setSelectedFile] = useState(null);\n  const navigate = useNavigate();\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      setFileName(file.name);\n      setSelectedFile(file);\n      e.dataTransfer.clearData();\n    }\n  };\n\n  const handleFileInput = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setFileName(file.name);\n      setSelectedFile(file);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedFile) {\n      navigate('/PdfViewer', { state: { file: selectedFile } });\n    }\n  }, [selectedFile, navigate]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n          onDragEnter={handleDragEnter}\n          onDragOver={(e) => e.preventDefault()}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n        >\n          <p>Drag and drop a file here or click the button below to upload.</p>\n          <input type=\"file\" id=\"fileInput\" style={{ display: 'none' }} onChange={handleFileInput} />\n          <label htmlFor=\"fileInput\" className=\"upload-button\">\n            Select File\n          </label>\n          {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n// import React, {useState, useEffect, useRef} from 'react';\n// import './PdfViewer.css';\n// import './App.css';\n// import samplePDF from \"./na.pdf\";\n// import SinglePage from './Components/SinglePage';\n// import ModifyPage from './Components/ModifyPage';\n// import AutoTextArea from './Components/AutoTextArea';\n\n// import { useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\n\n\n// function App(){\n//   return(\n//     <BrowserRouter>\n//     <Routes>\n//       <Route path = \"/\" element={<Home />} />\n//       <Route path = \"/PdfViewer\" element= {<PdfViewer />} />\n//     </Routes>\n//     </BrowserRouter>\n//   );\n// }\n\n// function PdfViewer() {\n//   const [result, setResult] = useState([]);\n//   const [pageNumber, setPageNumber] = useState(1);\n//   const [redoStack, setRedoStack] = useState([]);\n//   const [flag, setFlag] = useState(\"\");\n//   const [bounds, setBounds] = useState({});\n//   const [isText, setIsText] = useState(false);\n//   const [buttonType, setButtonType] = useState(\"\");\n//   const tempRef = useRef(null);\n\n//   useEffect(() => {\n//     if(isText)\n//     {\n//       setIsText(false);\n//     }\n//   },[result])\n\n//   //Keep track of current page number\n//   const pageChange = (num) => {\n//     setPageNumber(num);\n//   }\n\n//   //Function to add text in PDF\n//   const addText = () => {\n//     //Flag to change cursor if text\n//     setIsText(true);\n//     document.getElementById(\"drawArea\").addEventListener(\"click\", (e) => {\n//       e.preventDefault();\n//       setResult(result => [...result, {id:generateKey(e.pageX), x: e.pageX, y: e.pageY -10, text: \"\", page: pageNumber, type: \"text\", ref: tempRef}]);\n//     }, { once: true });\n//   }\n\n//   //Undo function for both line and text\n//   const undo = () => {\n//     let temp = result.pop();\n//     if(temp)\n//     {\n//       if(temp.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"undo\");\n//       }\n//       setRedoStack(stack => [...stack,temp]);\n//       setResult(result);\n//     }\n//   }\n\n//   //Flag for DrawArea reference\n//   const changeFlag = () => {\n//     setFlag(\"\");\n//   }\n\n//   //Redo functionality\n//   const redo = () => {\n//     let top = redoStack.pop();\n//     if(top)\n//     {\n//       if(top.type === \"freehand\")\n//       {\n//         //Flag for DrawArea reference\n//         setFlag(\"redo\");\n//       }\n//       setResult(res => [...res,top]);\n//     }\n//   }\n\n//   const getPaths = (el) => {\n//     setResult(res => [...res,el]);\n//   }\n\n//   const getBounds = (obj) =>{\n//     setBounds(obj);\n//   }\n\n//   const generateKey = (pre) => {\n//     return `${ pre }_${ new Date().getTime() }`;\n//   }\n\n//   const onTextChange = (id, txt, ref) => {\n//     let indx = result.findIndex(x => x.id === id);\n//     let item = {...result[indx]};\n//     item.text = txt;\n//     item.ref = ref;\n//     result[indx] = item;\n//     setResult(result);\n//   }\n\n//   const changeButtonType = (type) => {\n//     setButtonType(type);\n//   }\n\n//   const resetButtonType = () => {\n//     setButtonType(\"\");\n//   }\n\n//   return (\n//     <div className=\"App\" >\n//     {\n//       result.map((res) => {\n//         if(res.type === \"text\")\n//         {\n//           let isShowing = \"hidden\";\n//           if(res.page === pageNumber)\n//           {\n//             isShowing = \"visible\";\n//           }\n//           return(\n//             <AutoTextArea key = {res.id} unique_key = {res.id} val = {res.text} onTextChange = {onTextChange} style = {{visibility: isShowing, color: \"red\" ,fontWeight:'normal', fontSize: 16, zIndex:20, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}></AutoTextArea>\n//             //<h1 key={index} style = {{textAlign: \"justify\",color: \"red\" ,fontWeight:'normal',width: 200, height: 80,fontSize: 33+'px', fontSize: 16, zIndex:10, position: \"absolute\", left: res.x+'px', top: res.y +'px'}}>{res.text}</h1>\n//           )\n//         }\n//         else\n//         {\n//           return(null);\n//         }\n//       })\n//     }\n      \n//       <h1 style = {{color: \"#3f51b5\"}}> PDF EDITOR</h1>\n\n//       <hr/>\n      \n            \n//       <div className=\"navbar\">\n//         <button onClick = {undo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-undo\"></i></button> \n//         <button onClick = {redo} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-redo\"></i></button> \n//         <button onClick = {addText} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-text\"></i></button>\n//         <button onClick = {() => changeButtonType(\"draw\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-pencil\"></i></button>\n//         <button onClick = {() => changeButtonType(\"download\")} style = {{marginTop: \"1%\", marginBottom: \"1%\"}}><i style ={{fontSize: 25}} className=\"fa fa-fw fa-download\"></i></button>\n//       </div>\n\n// {/* \n//       <button onClick = {undo} style = {{marginTop: \"1%\"}}>Undo</button>\n//       <button onClick = {redo} style = {{marginTop: \"1%\"}}>Redo</button>\n//       <br></br>\n//       <button onClick={addText} style = {{marginTop: \"1%\"}}>Add Text</button>*/}\n//       <SinglePage resetButtonType = {resetButtonType} buttonType = {buttonType} cursor = {isText ? \"text\": \"default\"} pdf = {samplePDF} pageChange = {pageChange} getPaths = {getPaths} flag = {flag} getBounds ={getBounds} changeFlag = {changeFlag}/>\n//       <ModifyPage resetButtonType = {resetButtonType} buttonType = {buttonType} pdf = {samplePDF} result = {result} bounds = {bounds}/>\n//       <hr></hr>\n      \n//     </div>\n//   );\n// }\n\n\n// function Home() {\n//   const [dragging, setDragging] = useState(false);\n//   const [fileName, setFileName] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(true);\n//   };\n\n//   const handleDragLeave = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n//   };\n\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     e.stopPropagation();\n//     setDragging(false);\n\n//     if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n//       const file = e.dataTransfer.files[0];\n//       setFileName(file.name);\n//       e.dataTransfer.clearData();\n//     }\n//   };\n\n//   const handleFileInput = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFileName(file.name);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (fileName) {\n//       navigate('/PdfViewer');\n//     }\n//   }, [fileName, navigate]);\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <div\n//           className={`drag-drop-zone ${dragging ? 'dragging' : ''}`}\n//           onDragEnter={handleDragEnter}\n//           onDragOver={(e) => e.preventDefault()}\n//           onDragLeave={handleDragLeave}\n//           onDrop={handleDrop}\n//         >\n//           <p>Drag and drop a file here or click the button below to upload.</p>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             style={{ display: 'none' }}\n//             onChange={handleFileInput}\n//           />\n//           <label htmlFor=\"fileInput\" className=\"upload-button\">\n//             Select File\n//           </label>\n//           {fileName && <p className=\"file-name\">Uploaded File: {fileName}</p>}\n\n//         </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n// export default App;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { assertIs, error } from \"../utils\";\nexport var RotationTypes;\n\n(function (RotationTypes) {\n  RotationTypes[\"Degrees\"] = \"degrees\";\n  RotationTypes[\"Radians\"] = \"radians\";\n})(RotationTypes || (RotationTypes = {}));\n\nexport var radians = function (radianAngle) {\n  assertIs(radianAngle, 'radianAngle', ['number']);\n  return {\n    type: RotationTypes.Radians,\n    angle: radianAngle\n  };\n};\nexport var degrees = function (degreeAngle) {\n  assertIs(degreeAngle, 'degreeAngle', ['number']);\n  return {\n    type: RotationTypes.Degrees,\n    angle: degreeAngle\n  };\n};\nvar Radians = RotationTypes.Radians,\n    Degrees = RotationTypes.Degrees;\nexport var degreesToRadians = function (degree) {\n  return degree * Math.PI / 180;\n};\nexport var radiansToDegrees = function (radian) {\n  return radian * 180 / Math.PI;\n}; // prettier-ignore\n\nexport var toRadians = function (rotation) {\n  return rotation.type === Radians ? rotation.angle : rotation.type === Degrees ? degreesToRadians(rotation.angle) : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n}; // prettier-ignore\n\nexport var toDegrees = function (rotation) {\n  return rotation.type === Radians ? radiansToDegrees(rotation.angle) : rotation.type === Degrees ? rotation.angle : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n};","map":{"version":3,"sources":["../../src/api/rotations.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,KAAnB,QAA0B,UAA1B;AAEA,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACvB,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACD,CAHD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB;;AAiBA,OAAO,IAAM,OAAO,GAAG,UAAC,WAAD,EAAoB;AACzC,EAAA,QAAQ,CAAC,WAAD,EAAc,aAAd,EAA6B,CAAC,QAAD,CAA7B,CAAR;AACA,SAAO;AAAE,IAAA,IAAI,EAAE,aAAa,CAAC,OAAtB;AAA+B,IAAA,KAAK,EAAE;AAAtC,GAAP;AACD,CAHM;AAKP,OAAO,IAAM,OAAO,GAAG,UAAC,WAAD,EAAoB;AACzC,EAAA,QAAQ,CAAC,WAAD,EAAc,aAAd,EAA6B,CAAC,QAAD,CAA7B,CAAR;AACA,SAAO;AAAE,IAAA,IAAI,EAAE,aAAa,CAAC,OAAtB;AAA+B,IAAA,KAAK,EAAE;AAAtC,GAAP;AACD,CAHM;AAKC,IAAA,OAAO,GAAc,aAAa,CAA3B,OAAP;AAAA,IAAS,OAAO,GAAK,aAAa,CAAlB,OAAhB;AAER,OAAO,IAAM,gBAAgB,GAAG,UAAC,MAAD,EAAe;AAAK,SAAC,MAAM,GAAG,IAAI,CAAC,EAAf,GAAA,GAAA;AAAwB,CAArE;AACP,OAAO,IAAM,gBAAgB,GAAG,UAAC,MAAD,EAAe;AAAK,SAAC,MAAM,GAAG,GAAV,GAAiB,IAAI,CAArB,EAAA;AAAwB,CAArE,C,CAEP;;AACA,OAAO,IAAM,SAAS,GAAG,UAAC,QAAD,EAAmB;AACxC,SAAA,QAAQ,CAAC,IAAT,KAAkB,OAAlB,GAA4B,QAAQ,CAAC,KAArC,GACA,QAAQ,CAAC,IAAT,KAAkB,OAAlB,GAA4B,gBAAgB,CAAC,QAAQ,CAAC,KAAV,CAA5C,GACA,KAAK,CAAC,uBAAqB,IAAI,CAAC,SAAL,CAAe,QAAf,CAAtB,CAFL;AAEsD,CAHnD,C,CAKP;;AACA,OAAO,IAAM,SAAS,GAAG,UAAC,QAAD,EAAmB;AACxC,SAAA,QAAQ,CAAC,IAAT,KAAkB,OAAlB,GAA4B,gBAAgB,CAAC,QAAQ,CAAC,KAAV,CAA5C,GACA,QAAQ,CAAC,IAAT,KAAkB,OAAlB,GAA4B,QAAQ,CAAC,KAArC,GACA,KAAK,CAAC,uBAAqB,IAAI,CAAC,SAAL,CAAe,QAAf,CAAtB,CAFL;AAEsD,CAHnD","sourceRoot":"","sourcesContent":["import { assertIs, error } from \"../utils\";\nexport var RotationTypes;\n(function (RotationTypes) {\n    RotationTypes[\"Degrees\"] = \"degrees\";\n    RotationTypes[\"Radians\"] = \"radians\";\n})(RotationTypes || (RotationTypes = {}));\nexport var radians = function (radianAngle) {\n    assertIs(radianAngle, 'radianAngle', ['number']);\n    return { type: RotationTypes.Radians, angle: radianAngle };\n};\nexport var degrees = function (degreeAngle) {\n    assertIs(degreeAngle, 'degreeAngle', ['number']);\n    return { type: RotationTypes.Degrees, angle: degreeAngle };\n};\nvar Radians = RotationTypes.Radians, Degrees = RotationTypes.Degrees;\nexport var degreesToRadians = function (degree) { return (degree * Math.PI) / 180; };\nexport var radiansToDegrees = function (radian) { return (radian * 180) / Math.PI; };\n// prettier-ignore\nexport var toRadians = function (rotation) {\n    return rotation.type === Radians ? rotation.angle\n        : rotation.type === Degrees ? degreesToRadians(rotation.angle)\n            : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n};\n// prettier-ignore\nexport var toDegrees = function (rotation) {\n    return rotation.type === Radians ? radiansToDegrees(rotation.angle)\n        : rotation.type === Degrees ? rotation.angle\n            : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n};\n//# sourceMappingURL=rotations.js.map"]},"metadata":{},"sourceType":"module"}